name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ steps.version.outputs.version }}
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Build with version information
        go build \
          -ldflags "-X cherry-go/cmd.Version=${VERSION} -X cherry-go/cmd.CommitHash=${COMMIT_HASH} -X cherry-go/cmd.BuildTime=${BUILD_TIME} -s -w" \
          -o cherry-go-${{ matrix.suffix }} \
          .
          
    - name: Create archive
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip cherry-go-${{ matrix.suffix }}.zip cherry-go-${{ matrix.suffix }}.exe
        else
          tar -czf cherry-go-${{ matrix.suffix }}.tar.gz cherry-go-${{ matrix.suffix }}
        fi
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: cherry-go-${{ matrix.suffix }}
        path: |
          cherry-go-${{ matrix.suffix }}*
          
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find ./artifacts -name "cherry-go-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        ls -la release-assets/
        
    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # Extract changelog for this version from CHANGELOG.md
        if [ -f CHANGELOG.md ]; then
          # Find the section for this version and extract until the next version
          CHANGELOG_CONTENT=$(awk "/^## \[${VERSION#v}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -n "$CHANGELOG_CONTENT" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release $VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "changelog=Release $VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update installation script checksums
      run: |
        # Generate checksums for the release assets
        cd release-assets
        sha256sum cherry-go-* > cherry-go-checksums.txt
        
    - name: Upload checksums
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        files: release-assets/cherry-go-checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
