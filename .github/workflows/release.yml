name: Release

on:
  push:
    branches: [ main ]

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.version.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install svu (Semantic Version Util)
      run: |
        go install github.com/caarlos0/svu@latest
        
    - name: Get current version
      id: current_version
      run: |
        # Get the latest tag, if no tags exist, start with v0.0.0
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${CURRENT_VERSION}"
        
    - name: Calculate next version
      id: version
      run: |
        # Use svu to calculate next version based on conventional commits
        NEXT_VERSION=$(svu next --strip-prefix)
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        
        # If versions are the same, no version bump needed
        if [ "v${NEXT_VERSION}" = "${CURRENT_VERSION}" ]; then
          echo "No version bump needed"
          echo "new_version=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "new_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
        echo "Next version: ${NEXT_VERSION}"
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s" ${CURRENT_VERSION}..HEAD)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "${CHANGELOG}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Update version in code
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Update version in cmd/version.go
        sed -i "s/Version = \"dev\"/Version = \"${NEW_VERSION}\"/" cmd/version.go
        
        # Update CHANGELOG.md
        DATE=$(date +"%Y-%m-%d")
        CHANGELOG="${{ steps.version.outputs.changelog }}"
        
        # Create new changelog entry
        echo "## [${NEW_VERSION}] - ${DATE}" > temp_changelog.md
        echo "" >> temp_changelog.md
        echo "${CHANGELOG}" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Prepend to existing changelog
        if [ -f CHANGELOG.md ]; then
          cat CHANGELOG.md >> temp_changelog.md
        fi
        mv temp_changelog.md CHANGELOG.md
        
    - name: Commit version bump
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add cmd/version.go CHANGELOG.md
        git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]"
        git push
        
    - name: Create and push tag
      if: steps.version.outputs.new_version != ''
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
        git push origin "v${NEW_VERSION}"
